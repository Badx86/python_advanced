name: Tests with Allure Report

on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # manual run

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: example
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 🔄 Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: 📋 Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi --no-root

      - name: 📈 Download previous history
        uses: dawidd6/action-download-artifact@v11
        continue-on-error: true
        with:
          name: allure-history
          path: allure-history

      - name: 📂 Prepare directories
        run: |
          mkdir -p allure-results/history
          echo "Created allure-results/history directory"

      - name: 📥 Copy history
        continue-on-error: true
        run: |
          if [ -d "allure-history" ] && [ "$(ls -A allure-history 2>/dev/null)" ]; then
            cp -r allure-history/* allure-results/history/
            echo "✅ History copied successfully"
            ls -la allure-results/history/
          else
            echo "ℹ️ No previous history found"
          fi

      - name: 🚀 Start FastAPI server
        run: |
          poetry run python app/main.py &
          sleep 10  # Ждем запуска сервера
        env:
          DATABASE_ENGINE: postgresql+psycopg2://postgres:example@localhost:5432/postgres
          API_URL: http://localhost:8000
          HOST: 0.0.0.0
          PORT: 8000

      - name: 🧪 Run tests
        continue-on-error: true
        run: |
          poetry run pytest tests/ -v \
            --alluredir=allure-results \
            --tb=short
        env:
          DATABASE_ENGINE: postgresql+psycopg2://postgres:example@localhost:5432/postgres
          API_URL: http://localhost:8000

      - name: 📊 Generate Allure Report
        if: always()
        run: |
          # Устанавливаем Allure CLI
          wget https://github.com/allure-framework/allure2/releases/download/2.24.1/allure-2.24.1.tgz
          tar -zxf allure-2.24.1.tgz
          sudo mv allure-2.24.1 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          
          # Проверяем содержимое в allure-results
          echo "📁 Contents of allure-results before generation:"
          ls -la allure-results/
          
          # Генерируем отчет
          allure generate allure-results --clean -o allure-report
          
          # Проверяем создание истории
          echo "📈 Contents of allure-report after generation:"
          ls -la allure-report/
          if [ -d "allure-report/history" ]; then
            echo "✅ History directory created"
            ls -la allure-report/history/
          else
            echo "❌ No history directory found"
          fi

      - name: 💾 Save history
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-history
          path: allure-report/history
          retention-days: 30

      - name: 📤 Upload Allure Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results/

      - name: 📈 Upload Allure Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/

      - name: 🌐 Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-report

  # Отдельный job для уведомлений
  notify:
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: 📝 Test Results Summary
        run: |
          echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Report | [View Allure Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/allure-report/) |" >> $GITHUB_STEP_SUMMARY