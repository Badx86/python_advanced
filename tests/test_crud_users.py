import allure
import logging
import pytest
import random
from mimesis import Person
from tests.assertions import APIAssertions

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
person = Person()


def generate_random_user():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â—å—é mimesis"""
    return {"name": person.first_name().lower(), "job": person.occupation().lower()}


@allure.feature("Users CRUD Operations")
@pytest.mark.crud
class TestUsersCRUD:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ë–î"""

    @allure.title("Create new user via API")
    def test_create_user(self, api_client) -> None:
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (API + –ë–î)"""
        user_info = generate_random_user()
        logger.info(f"Creating user with data: {user_info}")

        response = api_client.post("/api/users", json=user_info)

        # –õ–æ–≥–∏—Ä—É–µ–º curl –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        APIAssertions.log_curl_command(response, "üìù Create User")

        APIAssertions.check_create_user_response(
            response, "/api/users", user_info["name"], user_info["job"]
        )
        logger.info("User created and verified in database successfully")

    @allure.title("Read existing user by ID")
    def test_read_user(self, api_client) -> None:
        """–¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        response = api_client.get("/api/users", params={"page": 1, "size": 50})
        users_page = APIAssertions.check_users_list_response(
            response, "/api/users", page=1, per_page=50
        )

        if users_page.items:
            random_user = random.choice(users_page.items)
            user_id = random_user.id

            # –ß–∏—Ç–∞–µ–º —ç—Ç–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response = api_client.get(f"/api/users/{user_id}")
            APIAssertions.check_user_response(response, f"/api/users/{user_id}")
            logger.info(f"Random user {user_id} read successfully")
        else:
            logger.warning("No users found in database for read test")

    @allure.title("Update user with PUT method")
    def test_update_user_put(self, api_client) -> None:
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (API + –ë–î)"""
        user_info = generate_random_user()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        create_response = api_client.post("/api/users", json=user_info)
        created_user = APIAssertions.check_create_user_response(
            create_response, "/api/users", user_info["name"], user_info["job"]
        )
        user_id = int(created_user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        original_user = APIAssertions.check_user_in_database(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        updated_info = generate_random_user()
        logger.info(f"Updating user {user_id} with data: {updated_info}")

        response = api_client.put(f"/api/users/{user_id}", json=updated_info)

        # –õ–æ–≥–∏—Ä—É–µ–º curl –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        APIAssertions.log_curl_command(response, f"üîÑ Update User {user_id}")

        APIAssertions.check_update_user_response(
            response,
            f"/api/users/{user_id}",
            updated_info["name"],
            updated_info["job"],
            user_id,
            original_user,
        )
        logger.info(f"User {user_id} updated and verified in database successfully")

    @allure.title("Update user with PATCH method")
    def test_update_user_patch(self, api_client) -> None:
        """–¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (API + –ë–î)"""
        user_info = generate_random_user()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        create_response = api_client.post("/api/users", json=user_info)
        created_user = APIAssertions.check_create_user_response(
            create_response, "/api/users", user_info["name"], user_info["job"]
        )
        user_id = int(created_user.id)

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        original_user = APIAssertions.check_user_in_database(user_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        updated_info = generate_random_user()
        logger.info(f"Patching user {user_id} with data: {updated_info}")

        response = api_client.patch(f"/api/users/{user_id}", json=updated_info)
        APIAssertions.check_update_user_response(
            response,
            f"/api/users/{user_id}",
            updated_info["name"],
            updated_info["job"],
            user_id,
            original_user,
        )
        logger.info(f"User {user_id} patched and verified in database successfully")

    @allure.title("Delete user from system")
    def test_delete_user(self, api_client) -> None:
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (API + –ë–î)"""
        user_info = generate_random_user()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        create_response = api_client.post("/api/users", json=user_info)
        created_user = APIAssertions.check_create_user_response(
            create_response, "/api/users", user_info["name"], user_info["job"]
        )
        user_id = int(created_user.id)

        # –£–¥–∞–ª—è–µ–º –µ–≥–æ
        response = api_client.delete(f"/api/users/{user_id}")

        # –õ–æ–≥–∏—Ä—É–µ–º curl –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        APIAssertions.log_curl_command(response, f"üóëÔ∏è Delete User {user_id}")

        APIAssertions.check_delete_user_response(
            response, f"/api/users/{user_id}", user_id
        )
        logger.info(f"User {user_id} deleted and verified removed from database")

    @allure.title("Update non-existent user")
    def test_update_nonexistent_user(self, api_client) -> None:
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        updated_info = generate_random_user()
        logger.info(f"Updating non-existent user with data: {updated_info}")

        response = api_client.put("/api/users/999999", json=updated_info)
        # curl –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ 404
        APIAssertions.check_404_error(response, "/api/users/999999")
        logger.info("Non-existent user correctly failed with 404")

    @allure.title("Delete non-existent user")
    def test_delete_nonexistent_user(self, api_client) -> None:
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        response = api_client.delete("/api/users/999999")
        # curl –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ 404
        APIAssertions.check_404_error(response, "/api/users/999999")
        logger.info("Non-existent user DELETE correctly failed with 404")

    @allure.title("Full CRUD cycle for user")
    def test_create_and_delete_flow(self, api_client) -> None:
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: —Å–æ–∑–¥–∞–Ω–∏–µ -> –ø—Ä–æ–≤–µ—Ä–∫–∞ -> —É–¥–∞–ª–µ–Ω–∏–µ (—Å –ë–î –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏)"""
        user_info = generate_random_user()

        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        create_response = api_client.post("/api/users", json=user_info)
        created_user = APIAssertions.check_create_user_response(
            create_response, "/api/users", user_info["name"], user_info["job"]
        )
        user_id = int(created_user.id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î
        APIAssertions.check_user_in_database(user_id, user_info["name"])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ API
        get_response = api_client.get(f"/api/users/{user_id}")
        APIAssertions.check_user_response(get_response, f"/api/users/{user_id}")

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        delete_response = api_client.delete(f"/api/users/{user_id}")
        APIAssertions.check_delete_user_response(
            delete_response, f"/api/users/{user_id}", user_id
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ API
        get_after_delete = api_client.get(f"/api/users/{user_id}")
        # curl –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ 404
        APIAssertions.check_404_error(get_after_delete, f"/api/users/{user_id}")

        logger.info(
            f"Full CRUD cycle with database verification completed for user {user_id}"
        )
